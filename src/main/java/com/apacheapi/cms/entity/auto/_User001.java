package com.apacheapi.cms.entity.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.time.LocalDate;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.property.DateProperty;
import org.apache.cayenne.exp.property.PropertyFactory;
import org.apache.cayenne.exp.property.StringProperty;

/**
 * Class _User001 was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _User001 extends BaseDataObject {

    private static final long serialVersionUID = 1L;

    public static final String ID_PK_COLUMN = "id";

    public static final DateProperty<LocalDate> DATE_OF_BIRTH = PropertyFactory.createDate("dateOfBirth", LocalDate.class);
    public static final StringProperty<String> EMAIL = PropertyFactory.createString("email", String.class);
    public static final StringProperty<String> GENDER = PropertyFactory.createString("gender", String.class);
    public static final StringProperty<String> MOBILE = PropertyFactory.createString("mobile", String.class);
    public static final StringProperty<String> PASSWORD = PropertyFactory.createString("password", String.class);
    public static final StringProperty<String> USERNAME = PropertyFactory.createString("username", String.class);

    protected LocalDate dateOfBirth;
    protected String email;
    protected String gender;
    protected String mobile;
    protected String password;
    protected String username;


    public void setDateOfBirth(LocalDate dateOfBirth) {
        beforePropertyWrite("dateOfBirth", this.dateOfBirth, dateOfBirth);
        this.dateOfBirth = dateOfBirth;
    }

    public LocalDate getDateOfBirth() {
        beforePropertyRead("dateOfBirth");
        return this.dateOfBirth;
    }

    public void setEmail(String email) {
        beforePropertyWrite("email", this.email, email);
        this.email = email;
    }

    public String getEmail() {
        beforePropertyRead("email");
        return this.email;
    }

    public void setGender(String gender) {
        beforePropertyWrite("gender", this.gender, gender);
        this.gender = gender;
    }

    public String getGender() {
        beforePropertyRead("gender");
        return this.gender;
    }

    public void setMobile(String mobile) {
        beforePropertyWrite("mobile", this.mobile, mobile);
        this.mobile = mobile;
    }

    public String getMobile() {
        beforePropertyRead("mobile");
        return this.mobile;
    }

    public void setPassword(String password) {
        beforePropertyWrite("password", this.password, password);
        this.password = password;
    }

    public String getPassword() {
        beforePropertyRead("password");
        return this.password;
    }

    public void setUsername(String username) {
        beforePropertyWrite("username", this.username, username);
        this.username = username;
    }

    public String getUsername() {
        beforePropertyRead("username");
        return this.username;
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "dateOfBirth":
                return this.dateOfBirth;
            case "email":
                return this.email;
            case "gender":
                return this.gender;
            case "mobile":
                return this.mobile;
            case "password":
                return this.password;
            case "username":
                return this.username;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "dateOfBirth":
                this.dateOfBirth = (LocalDate)val;
                break;
            case "email":
                this.email = (String)val;
                break;
            case "gender":
                this.gender = (String)val;
                break;
            case "mobile":
                this.mobile = (String)val;
                break;
            case "password":
                this.password = (String)val;
                break;
            case "username":
                this.username = (String)val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.dateOfBirth);
        out.writeObject(this.email);
        out.writeObject(this.gender);
        out.writeObject(this.mobile);
        out.writeObject(this.password);
        out.writeObject(this.username);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.dateOfBirth = (LocalDate)in.readObject();
        this.email = (String)in.readObject();
        this.gender = (String)in.readObject();
        this.mobile = (String)in.readObject();
        this.password = (String)in.readObject();
        this.username = (String)in.readObject();
    }

}
